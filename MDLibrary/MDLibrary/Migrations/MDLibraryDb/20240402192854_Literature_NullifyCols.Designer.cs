// <auto-generated />
using System;
using MDLibrary.Domain;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MDLibrary.Migrations.MDLibraryDb
{
    [DbContext(typeof(MDLibraryDbContext))]
    [Migration("20240402192854_Literature_NullifyCols")]
    partial class Literature_NullifyCols
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AuthorLiterature", b =>
                {
                    b.Property<int>("AuthorsAuthorId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.HasKey("AuthorsAuthorId", "Id");

                    b.HasIndex("Id");

                    b.ToTable("AuthorLiterature");
                });

            modelBuilder.Entity("KeywordLiterature", b =>
                {
                    b.Property<int>("KeywordsKeywordId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.HasKey("KeywordsKeywordId", "Id");

                    b.HasIndex("Id");

                    b.ToTable("KeywordLiterature");
                });

            modelBuilder.Entity("MDLibrary.Domain.Entities.Author", b =>
                {
                    b.Property<int>("AuthorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuthorId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(32)");

                    b.HasKey("AuthorId");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("MDLibrary.Domain.Entities.File", b =>
                {
                    b.Property<int>("FileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FileId"));

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Filename")
                        .IsRequired()
                        .HasColumnType("varchar(64)");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.HasKey("FileId");

                    b.HasIndex("Id");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("MDLibrary.Domain.Entities.Keyword", b =>
                {
                    b.Property<int>("KeywordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("KeywordId"));

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("varchar(32)");

                    b.HasKey("KeywordId");

                    b.ToTable("Keywords");
                });

            modelBuilder.Entity("MDLibrary.Domain.Entities.Literature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Abstract")
                        .HasColumnType("varchar(700)");

                    b.Property<string>("Bbc")
                        .HasColumnType("varchar(32)");

                    b.Property<string>("Caption")
                        .IsRequired()
                        .HasColumnType("varchar(256)");

                    b.Property<string>("Isbn")
                        .HasColumnType("varchar(32)");

                    b.Property<short?>("PageCount")
                        .HasColumnType("smallint");

                    b.Property<string>("PublishLocation")
                        .HasColumnType("varchar(64)");

                    b.Property<short?>("PublishYear")
                        .HasColumnType("smallint");

                    b.Property<string>("Publisher")
                        .HasColumnType("varchar(64)");

                    b.Property<string>("Udc")
                        .HasColumnType("varchar(32)");

                    b.HasKey("Id");

                    b.ToTable("Literature");
                });

            modelBuilder.Entity("AuthorLiterature", b =>
                {
                    b.HasOne("MDLibrary.Domain.Entities.Author", null)
                        .WithMany()
                        .HasForeignKey("AuthorsAuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MDLibrary.Domain.Entities.Literature", null)
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KeywordLiterature", b =>
                {
                    b.HasOne("MDLibrary.Domain.Entities.Keyword", null)
                        .WithMany()
                        .HasForeignKey("KeywordsKeywordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MDLibrary.Domain.Entities.Literature", null)
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MDLibrary.Domain.Entities.File", b =>
                {
                    b.HasOne("MDLibrary.Domain.Entities.Literature", "Literature")
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Literature");
                });
#pragma warning restore 612, 618
        }
    }
}
